# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2016-09-08 07:12
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nymph.models
import nymph.storage


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('nymph', '0002_auto_20160831_1350'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbnormalAssembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('situation', models.PositiveSmallIntegerField(choices=[(1, 'broken but still available'), (2, 'unavailable')])),
            ],
            options={
                'db_table': 'abnormal_assembly',
            },
        ),
        migrations.CreateModel(
            name='AssemblyCalculation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('gap', models.DecimalField(decimal_places=5, default=0, help_text='cm gap from component assembly base to fuel active top', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'assembly_calculation',
            },
        ),
        migrations.CreateModel(
            name='AssemblyCut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('distance', models.DecimalField(decimal_places=5, default=0, help_text='cm from intersect surface to fuel active top', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'assembly_cut',
            },
        ),
        migrations.CreateModel(
            name='AssemblyIntersectSurface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel', models.BooleanField()),
            ],
            options={
                'db_table': 'assembly_intersect_surface',
            },
        ),
        migrations.CreateModel(
            name='AssemblyIntersectSurfaceCompo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly_intersect_surface', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.AssemblyIntersectSurface')),
            ],
            options={
                'db_table': 'assembly_intersect_surface_compo',
            },
        ),
        migrations.CreateModel(
            name='AssemblyTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'prepared'), (1, 'waiting'), (2, 'calculating'), (3, 'suspended'), (4, 'canceled'), (5, 'stopped'), (6, 'completed'), (7, 'error')], default=0)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('bp_in', models.BooleanField(help_text='if bp rod in')),
                ('max_burn_up_point', models.DecimalField(decimal_places=5, default=65, help_text='GWd/tU', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_boron_density', models.PositiveSmallIntegerField(default=2000, help_text='ppm')),
                ('min_boron_density', models.PositiveSmallIntegerField(default=0, help_text='ppm')),
                ('boron_density_interval', models.PositiveSmallIntegerField(default=200, help_text='ppm')),
                ('max_fuel_temperature', models.PositiveSmallIntegerField(default=1253, help_text='K')),
                ('min_fuel_temperature', models.PositiveSmallIntegerField(default=553, help_text='K')),
                ('fuel_temperature_interval', models.PositiveSmallIntegerField(default=50, help_text='K')),
                ('max_moderator_temperature', models.PositiveSmallIntegerField(default=615, help_text='K')),
                ('min_moderator_temperature', models.PositiveSmallIntegerField(default=561, help_text='K')),
                ('moderator_temperature_interval', models.PositiveSmallIntegerField(default=4, help_text='K')),
                ('boron_density', models.PositiveSmallIntegerField(default=800, help_text='ppm')),
                ('dep_strategy', models.CharField(choices=[('LLR', 'LLR'), ('PPC', 'PPC'), ('LR', 'LR'), ('PC', 'PC')], default='LLR', max_length=3)),
                ('track_density', models.DecimalField(decimal_places=5, default=0.03, help_text='cm', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('polar_type', models.CharField(choices=[('LCMD', 'LCMD'), ('TYPL', 'TYPL'), ('DeCT', 'DeCT')], default='LCMD', max_length=4)),
                ('polar_azimuth', models.CommaSeparatedIntegerField(default='4,16', max_length=50)),
                ('iter_inner', models.PositiveSmallIntegerField(default=3)),
                ('iter_outer', models.PositiveSmallIntegerField(default=100)),
                ('eps_keff', models.DecimalField(decimal_places=7, default=1e-05, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('eps_flux', models.DecimalField(decimal_places=7, default=0.0001, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('leakage_corrector_path', models.PositiveSmallIntegerField(choices=[(0, 0), (1, 1), (2, 2)], default=2)),
                ('leakage_corrector_method', models.CharField(choices=[('B1', 'B1'), ('P1', 'P1')], default='B1', max_length=2)),
                ('buckling_or_keff', models.DecimalField(decimal_places=5, default=1, max_digits=10)),
                ('condensation_path', models.PositiveSmallIntegerField(choices=[(0, 0), (1, 1), (2, 2)], default=1)),
                ('num_group_2D', models.PositiveSmallIntegerField(choices=[(2, 2), (3, 3), (4, 4), (8, 8), (18, 18), (25, 25), (33, 33)], default=25)),
                ('num_group_edit', models.PositiveSmallIntegerField(choices=[(2, 2), (3, 3), (4, 4), (8, 8), (18, 18), (25, 25), (33, 33)], default=2)),
                ('micro_xs_output', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'assembly_task',
            },
        ),
        migrations.CreateModel(
            name='BaffleCalculation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'prepared'), (1, 'waiting'), (2, 'calculating'), (3, 'suspended'), (4, 'canceled'), (5, 'stopped'), (6, 'completed'), (7, 'error')], default=0)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('track_density', models.DecimalField(decimal_places=5, default=0.02, help_text='cm', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('polar_type', models.CharField(choices=[('LCMD', 'LCMD'), ('TYPL', 'TYPL'), ('DeCT', 'DeCT')], default='LCMD', max_length=4)),
                ('polar_azimuth', models.CommaSeparatedIntegerField(default='4,4', max_length=50)),
                ('iter_inner', models.PositiveSmallIntegerField(default=3)),
                ('iter_outer', models.PositiveSmallIntegerField(default=100)),
                ('eps_keff', models.DecimalField(decimal_places=7, default=0.0001, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('eps_flux', models.DecimalField(decimal_places=7, default=0.0001, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('leakage_corrector_path', models.PositiveSmallIntegerField(choices=[(0, 0), (1, 1), (2, 2)], default=0)),
                ('leakage_corrector_method', models.CharField(choices=[('B1', 'B1'), ('P1', 'P1')], default='B1', max_length=2)),
                ('buckling_or_keff', models.DecimalField(decimal_places=5, default=1, max_digits=10)),
                ('condensation_path', models.PositiveSmallIntegerField(choices=[(0, 0), (1, 1), (2, 2)], default=2)),
                ('num_group_2D', models.PositiveSmallIntegerField(choices=[(2, 2), (3, 3), (4, 4), (8, 8), (18, 18), (25, 25), (33, 33)], default=25)),
                ('num_group_edit', models.PositiveSmallIntegerField(choices=[(2, 2), (3, 3), (4, 4), (8, 8), (18, 18), (25, 25), (33, 33)], default=2)),
                ('micro_xs_output', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'baffle_calculation',
            },
        ),
        migrations.CreateModel(
            name='BottomBaffle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gap_to_fuel', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('thickness', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'bottom_baffle',
            },
        ),
        migrations.CreateModel(
            name='ComponentAssembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=16)),
                ('symmetry', models.BooleanField(default=True, help_text='satisfy 1/8 symmetry')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'control rod assembly'), (2, 'burnable poison assembly')])),
            ],
            options={
                'db_table': 'component_rod_assembly',
            },
        ),
        migrations.CreateModel(
            name='ComponentRodLoadingPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gap', models.DecimalField(decimal_places=5, default=0, help_text='cm gap from absorb top to component assembly base', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('component_assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ComponentAssembly')),
            ],
            options={
                'db_table': 'component_rod_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='ComputeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('IP', models.GenericIPAddressField(unique=True)),
                ('queue', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'db_table': 'compute_node',
            },
        ),
        migrations.CreateModel(
            name='ControlRodCluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('cluster_name', models.CharField(max_length=5)),
                ('component_assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ComponentAssembly')),
            ],
            options={
                'db_table': 'control_rod_cluster',
            },
        ),
        migrations.CreateModel(
            name='ControlRodClusterLoadingPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_rod_cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ControlRodCluster')),
            ],
            options={
                'db_table': 'control_rod_cluster_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='ControlRodClusterMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'control_rod_cluster_map',
            },
        ),
        migrations.CreateModel(
            name='ControlRodClusterStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.DecimalField(decimal_places=5, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('control_rod_cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ControlRodCluster')),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ControlRodClusterMap')),
            ],
            options={
                'db_table': 'control_rod_cluster_step',
            },
        ),
        migrations.CreateModel(
            name='Coordinate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.PositiveSmallIntegerField()),
                ('column', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'coordinate',
            },
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('cycle_num', models.PositiveSmallIntegerField()),
                ('pull_outs', models.ManyToManyField(help_text='to pull out the control rod cluster at specific position', to='nymph.ControlRodClusterLoadingPattern')),
            ],
            options={
                'db_table': 'cycle',
            },
        ),
        migrations.CreateModel(
            name='EgretFollowCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('burn_up', models.DecimalField(blank=True, decimal_places=5, help_text='unit:MWd/tU', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('delta_time', models.DecimalField(blank=True, decimal_places=5, help_text='unit:day', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('relative_power', models.DecimalField(decimal_places=4, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('split', models.BooleanField(default=False)),
                ('export', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'egret_follow_case',
            },
        ),
        migrations.CreateModel(
            name='EgretFollowTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'prepared'), (1, 'waiting'), (2, 'calculating'), (3, 'suspended'), (4, 'canceled'), (5, 'stopped'), (6, 'completed'), (7, 'error')], default=0)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('input_file', models.FileField(blank=True, null=True, storage=nymph.storage.NymphStorage(), upload_to=nymph.models.custom_path)),
                ('authorized', models.BooleanField(default=False)),
                ('compute_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.ComputeNode')),
            ],
            options={
                'db_table': 'egret_follow_task',
            },
        ),
        migrations.CreateModel(
            name='EgretSequenceCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FTC', models.BooleanField(default=False)),
                ('MTC', models.BooleanField(default=False)),
                ('DBW', models.BooleanField(default=False)),
                ('ITC', models.BooleanField(default=False)),
                ('MTD', models.BooleanField(default=False)),
                ('FTD', models.BooleanField(default=False)),
                ('ITD', models.BooleanField(default=False)),
                ('PWD', models.BooleanField(default=False)),
                ('XEN', models.BooleanField(default=False)),
                ('SMW', models.BooleanField(default=False)),
                ('SDM', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'egret_sequence_case',
            },
        ),
        migrations.CreateModel(
            name='EgretSequenceTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'prepared'), (1, 'waiting'), (2, 'calculating'), (3, 'suspended'), (4, 'canceled'), (5, 'stopped'), (6, 'completed'), (7, 'error')], default=0)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('compute_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.ComputeNode')),
                ('follow_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.EgretFollowTask')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'egret_sequence_task',
            },
        ),
        migrations.CreateModel(
            name='Fuel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('density', models.DecimalField(decimal_places=5, help_text='unit:g/cm3', max_digits=10)),
                ('enrichment', models.DecimalField(decimal_places=5, help_text='%', max_digits=10, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'fuel',
            },
        ),
        migrations.CreateModel(
            name='FuelAssembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('product_num', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'db_table': 'fuel_assembly',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyLoadingPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gap', models.DecimalField(decimal_places=5, default=0, help_text='cm gap from component assembly base to fuel active top', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('burnable_poison_assembly', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.ComponentAssembly')),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Cycle')),
                ('fuel_assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelAssembly')),
            ],
            options={
                'db_table': 'fuel_assembly_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=16)),
                ('symmetry', models.BooleanField(default=True, help_text='satisfy 1/8 symmetry')),
                ('active_length', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('side_length', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('pin_pitch', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'fuel_assembly_model',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly_enrichment', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'fuel_assembly_type',
            },
        ),
        migrations.CreateModel(
            name='FuelElementLoadingPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel_assembly_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelAssemblyType')),
            ],
            options={
                'db_table': 'fuel_element_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='FuelElementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'fuel_element_type',
            },
        ),
        migrations.CreateModel(
            name='FuelPelletModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('diameter', models.DecimalField(decimal_places=5, default=0, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('volume_percent', models.DecimalField(decimal_places=5, help_text='unit:%', max_digits=10, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('density_percent', models.DecimalField(decimal_places=5, default=95, help_text='%', max_digits=10, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('coated_thickness', models.DecimalField(decimal_places=5, default=0, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'fuel_pellet_model',
            },
        ),
        migrations.CreateModel(
            name='FuelPelletType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Fuel')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelPelletModel')),
            ],
            options={
                'db_table': 'fuel_pellet_type',
            },
        ),
        migrations.CreateModel(
            name='Grid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('volume', models.DecimalField(decimal_places=5, help_text='cm3', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('height', models.DecimalField(decimal_places=5, help_text='cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'grid',
            },
        ),
        migrations.CreateModel(
            name='GridLoadingPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('fuel_assembly_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelAssemblyModel')),
                ('grid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Grid')),
            ],
            options={
                'db_table': 'grid_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='LoadingPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
                ('file', models.FileField(upload_to=nymph.models.custom_path)),
                ('authorized', models.BooleanField(default=False)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Cycle')),
                ('pre_loading_pattern', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_loading_patterns', to='nymph.LoadingPattern')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='PelletLoadingPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.DecimalField(decimal_places=5, help_text='unit:cm Based on bottom', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('fuel_element_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelElementType')),
                ('fuel_pellet_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelPelletType')),
            ],
            options={
                'db_table': 'pellet_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'plant',
            },
        ),
        migrations.CreateModel(
            name='PositionPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'ASSEMBLY'), (2, 'CORE')])),
            ],
            options={
                'db_table': 'position_pattern',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plants', models.ManyToManyField(to='nymph.Plant')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='RadialBaffle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gap_to_fuel', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('thickness', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('outer_diameter', models.DecimalField(blank=True, decimal_places=5, help_text='unit:cm', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'radial_baffle',
            },
        ),
        migrations.CreateModel(
            name='ReactorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('AP1000', 'AP1000'), ('M310', 'M310'), ('CP600', 'CP600'), ('CP300', 'CP300'), ('MINI_CORE', 'MINI_CORE')], max_length=12)),
                ('row_index', models.CharField(help_text='separated by blank space', max_length=32)),
                ('column_index', models.CharField(help_text='separated by blank space', max_length=32)),
                ('assembly_pitch', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('diameter', models.DecimalField(decimal_places=5, help_text='cm core_equivalent_diameter', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('active_height', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('primary_system_pressure', models.DecimalField(decimal_places=5, help_text='unit:MPa', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('rated_power', models.DecimalField(decimal_places=5, help_text='MW thermal power', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('power_density', models.DecimalField(decimal_places=5, help_text='unit:W/g (fuel)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('coolant_volume', models.DecimalField(decimal_places=5, help_text='unit:10e6m3', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('coolant_flow_rate', models.DecimalField(decimal_places=5, help_text='unit:m3/h', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('fuel_temperature', models.PositiveSmallIntegerField(help_text='K')),
                ('moderator_temperature', models.PositiveSmallIntegerField(help_text='K')),
                ('step_size', models.DecimalField(decimal_places=5, help_text='unit:cm control rod', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('default_step', models.PositiveSmallIntegerField(help_text='control rod')),
                ('max_step', models.PositiveSmallIntegerField(help_text='control rod')),
                ('set_zero_to_direction', models.CharField(choices=[('E', 'East'), ('S', 'South'), ('W', 'West'), ('N', 'North')], default='E', max_length=1)),
                ('clockwise_increase', models.BooleanField(default=True)),
                ('position_pattern', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.PositionPattern')),
            ],
            options={
                'db_table': 'reactor_model',
            },
        ),
        migrations.CreateModel(
            name='RobinTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=32)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'prepared'), (1, 'waiting'), (2, 'calculating'), (3, 'suspended'), (4, 'canceled'), (5, 'stopped'), (6, 'completed'), (7, 'error')], default=0)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('input_file', models.FileField(storage=nymph.storage.NymphStorage(), upload_to=nymph.models.custom_path)),
                ('compute_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.ComputeNode')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'robin_task',
            },
        ),
        migrations.CreateModel(
            name='Rod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('usage', models.PositiveSmallIntegerField(choices=[(1, 'Fuel element WITH OUT SPECIFIC FUEL'), (2, 'control rod'), (3, 'burnable poison rod'), (4, 'guide tube'), (5, 'instrument tube')])),
            ],
            options={
                'db_table': 'rod',
            },
        ),
        migrations.CreateModel(
            name='RodCut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'rod_cut',
            },
        ),
        migrations.CreateModel(
            name='RodDifferentialWorth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top_step', models.DecimalField(decimal_places=5, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('bottom_step', models.DecimalField(decimal_places=5, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('delta_step', models.DecimalField(decimal_places=5, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('critical_search', models.BooleanField(default=True)),
                ('control_rod_cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ControlRodCluster')),
                ('sequence_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.EgretSequenceCase')),
            ],
            options={
                'db_table': 'rod_differential_worth',
            },
        ),
        migrations.CreateModel(
            name='RodIntegralWorth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('critical_search', models.BooleanField(default=True)),
                ('end_map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ControlRodClusterMap')),
                ('sequence_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.EgretSequenceCase')),
                ('start_map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rod_integral_worths', to='nymph.ControlRodClusterMap')),
            ],
            options={
                'db_table': 'rod_integral_worth',
            },
        ),
        migrations.CreateModel(
            name='RodIntersectSurface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('outer_diameter', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('inner_diameter', models.DecimalField(decimal_places=5, default=0, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'rod_intersect_surface',
            },
        ),
        migrations.CreateModel(
            name='RodIntersectSurfaceMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outer_diameter', models.DecimalField(decimal_places=5, default=0, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('intersect_surface', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.RodIntersectSurface')),
            ],
            options={
                'db_table': 'rod_intersect_surface_material',
            },
        ),
        migrations.CreateModel(
            name='SymbolicMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('FUEL', 'Common UO2 fuel'), ('MOD', 'H2O moderator')], max_length=8, unique=True)),
            ],
            options={
                'db_table': 'symbolic_material',
            },
        ),
        migrations.CreateModel(
            name='TopBaffle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gap_to_fuel', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('thickness', models.DecimalField(decimal_places=5, help_text='unit:cm', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'top_baffle',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField(blank=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('unit_num', models.PositiveSmallIntegerField()),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Plant')),
                ('reactor_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel')),
            ],
            options={
                'db_table': 'unit',
            },
        ),
        migrations.RenameField(
            model_name='mixturecompo',
            old_name='weight_percent',
            new_name='percent',
        ),
        migrations.RemoveField(
            model_name='assemblyposition',
            name='column',
        ),
        migrations.RemoveField(
            model_name='assemblyposition',
            name='position_type',
        ),
        migrations.RemoveField(
            model_name='assemblyposition',
            name='row',
        ),
        migrations.RemoveField(
            model_name='material',
            name='tag',
        ),
        migrations.RemoveField(
            model_name='reactorposition',
            name='column',
        ),
        migrations.RemoveField(
            model_name='reactorposition',
            name='row',
        ),
        migrations.AddField(
            model_name='assemblyposition',
            name='type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'FUEL'), (2, 'GUIDE TUBE'), (3, 'INSTRUMENT TUBE')], default=1),
        ),
        migrations.AddField(
            model_name='mixture',
            name='input_type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'by weight'), (2, 'by volume')], default=1),
        ),
        migrations.AlterField(
            model_name='assemblyposition',
            name='pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.PositionPattern'),
        ),
        migrations.AlterField(
            model_name='material',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AlterField(
            model_name='material',
            name='object_id',
            field=models.PositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name='reactorposition',
            name='pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.PositionPattern'),
        ),
        migrations.CreateModel(
            name='BPOutTask',
            fields=[
                ('assemblytask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='nymph.AssemblyTask')),
                ('burn_up_points', models.CharField(max_length=128)),
            ],
            options={
                'db_table': 'bp_out_task',
            },
            bases=('nymph.assemblytask',),
        ),
        migrations.CreateModel(
            name='CaseAdvancedOption',
            fields=[
                ('egretfollowcase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='nymph.EgretFollowCase')),
                ('description', models.CharField(blank=True, max_length=128)),
            ],
            options={
                'db_table': 'case_advanced_option',
            },
            bases=('nymph.egretfollowcase',),
        ),
        migrations.DeleteModel(
            name='AssemblyPositionPattern',
        ),
        migrations.DeleteModel(
            name='ReactorPositionPattern',
        ),
        migrations.AddField(
            model_name='topbaffle',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='topbaffle',
            name='reactor_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='rodintersectsurfacematerial',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='rodintersectsurface',
            name='materials',
            field=models.ManyToManyField(through='nymph.RodIntersectSurfaceMaterial', to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='rodcut',
            name='intersect_surface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.RodIntersectSurface'),
        ),
        migrations.AddField(
            model_name='rodcut',
            name='rod',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Rod'),
        ),
        migrations.AddField(
            model_name='rod',
            name='intersect_surfaces',
            field=models.ManyToManyField(through='nymph.RodCut', to='nymph.RodIntersectSurface'),
        ),
        migrations.AddField(
            model_name='radialbaffle',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='radialbaffle',
            name='reactor_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='grid',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='fuelpelletmodel',
            name='coated_material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='fuelpelletmodel',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='fuelelementtype',
            name='pellets',
            field=models.ManyToManyField(through='nymph.PelletLoadingPattern', to='nymph.FuelPelletType'),
        ),
        migrations.AddField(
            model_name='fuelelementtype',
            name='rod',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Rod'),
        ),
        migrations.AddField(
            model_name='fuelelementloadingpattern',
            name='fuel_element_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelElementType'),
        ),
        migrations.AddField(
            model_name='fuelelementloadingpattern',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.AssemblyPosition'),
        ),
        migrations.AddField(
            model_name='fuelassemblytype',
            name='fuel_element_types',
            field=models.ManyToManyField(through='nymph.FuelElementLoadingPattern', to='nymph.FuelElementType'),
        ),
        migrations.AddField(
            model_name='fuelassemblytype',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelAssemblyModel'),
        ),
        migrations.AddField(
            model_name='fuelassemblymodel',
            name='grids',
            field=models.ManyToManyField(through='nymph.GridLoadingPattern', to='nymph.Grid'),
        ),
        migrations.AddField(
            model_name='fuelassemblymodel',
            name='guide_tube',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel_assembly_models', to='nymph.Rod'),
        ),
        migrations.AddField(
            model_name='fuelassemblymodel',
            name='instrument_tube',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.Rod'),
        ),
        migrations.AddField(
            model_name='fuelassemblymodel',
            name='position_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.PositionPattern'),
        ),
        migrations.AddField(
            model_name='fuelassemblyloadingpattern',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorPosition'),
        ),
        migrations.AddField(
            model_name='fuelassembly',
            name='fuel_assembly_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelAssemblyType'),
        ),
        migrations.AddField(
            model_name='fuel',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='egretsequencecase',
            name='follow_case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.EgretFollowCase'),
        ),
        migrations.AddField(
            model_name='egretsequencecase',
            name='sequence_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.EgretSequenceTask'),
        ),
        migrations.AddField(
            model_name='egretfollowtask',
            name='loading_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.LoadingPattern'),
        ),
        migrations.AddField(
            model_name='egretfollowtask',
            name='pre_egret_task',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_egret_tasks', to='nymph.EgretFollowTask'),
        ),
        migrations.AddField(
            model_name='egretfollowtask',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='egretfollowcase',
            name='control_rod_cluster_map',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ControlRodClusterMap'),
        ),
        migrations.AddField(
            model_name='egretfollowcase',
            name='follow_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.EgretFollowTask'),
        ),
        migrations.AddField(
            model_name='cycle',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Unit'),
        ),
        migrations.AlterUniqueTogether(
            name='coordinate',
            unique_together=set([('row', 'column')]),
        ),
        migrations.AddField(
            model_name='controlrodclustermap',
            name='control_rod_clusters',
            field=models.ManyToManyField(through='nymph.ControlRodClusterStep', to='nymph.ControlRodCluster'),
        ),
        migrations.AddField(
            model_name='controlrodclustermap',
            name='reactor_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='controlrodclusterloadingpattern',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorPosition'),
        ),
        migrations.AddField(
            model_name='controlrodclusterloadingpattern',
            name='reactor_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='controlrodcluster',
            name='reactor_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='componentrodloadingpattern',
            name='component_rod',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Rod'),
        ),
        migrations.AddField(
            model_name='componentrodloadingpattern',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.AssemblyPosition'),
        ),
        migrations.AddField(
            model_name='componentassembly',
            name='component_rods',
            field=models.ManyToManyField(through='nymph.ComponentRodLoadingPattern', to='nymph.Rod'),
        ),
        migrations.AddField(
            model_name='componentassembly',
            name='position_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.PositionPattern'),
        ),
        migrations.AddField(
            model_name='bottombaffle',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.Material'),
        ),
        migrations.AddField(
            model_name='bottombaffle',
            name='reactor_model',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='bafflecalculation',
            name='assembly_task',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='nymph.AssemblyTask'),
        ),
        migrations.AddField(
            model_name='bafflecalculation',
            name='compute_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.ComputeNode'),
        ),
        migrations.AddField(
            model_name='bafflecalculation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assemblytask',
            name='compute_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.ComputeNode'),
        ),
        migrations.AddField(
            model_name='assemblytask',
            name='fuel_map',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.AssemblyIntersectSurface'),
        ),
        migrations.AddField(
            model_name='assemblytask',
            name='pin_map',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pre_robin_tasks', to='nymph.AssemblyIntersectSurface'),
        ),
        migrations.AddField(
            model_name='assemblytask',
            name='reactor_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='assemblytask',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assemblyintersectsurfacecompo',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.AssemblyPosition'),
        ),
        migrations.AddField(
            model_name='assemblyintersectsurfacecompo',
            name='rod_intersect_surface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.RodIntersectSurface'),
        ),
        migrations.AddField(
            model_name='assemblyintersectsurface',
            name='position_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.PositionPattern'),
        ),
        migrations.AddField(
            model_name='assemblyintersectsurface',
            name='rod_intersect_surfaces',
            field=models.ManyToManyField(through='nymph.AssemblyIntersectSurfaceCompo', to='nymph.RodIntersectSurface'),
        ),
        migrations.AddField(
            model_name='assemblycut',
            name='intersect_surface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.AssemblyIntersectSurface'),
        ),
        migrations.AddField(
            model_name='assemblycalculation',
            name='burnable_poison_assembly',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nymph.ComponentAssembly'),
        ),
        migrations.AddField(
            model_name='assemblycalculation',
            name='fuel_assembly_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelAssemblyType'),
        ),
        migrations.AddField(
            model_name='assemblycalculation',
            name='reactor_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.ReactorModel'),
        ),
        migrations.AddField(
            model_name='abnormalassembly',
            name='cycle',
            field=models.ForeignKey(help_text='broken at which cycle or unavailable since which cycle(not include)', on_delete=django.db.models.deletion.CASCADE, to='nymph.Cycle'),
        ),
        migrations.AddField(
            model_name='abnormalassembly',
            name='fuel_assembly',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nymph.FuelAssembly'),
        ),
        migrations.AddField(
            model_name='assemblyposition',
            name='coordinates',
            field=models.ManyToManyField(to='nymph.Coordinate'),
        ),
        migrations.AddField(
            model_name='reactorposition',
            name='coordinates',
            field=models.ManyToManyField(to='nymph.Coordinate'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='unit',
            order_with_respect_to='plant',
        ),
        migrations.AlterOrderWithRespectTo(
            name='rodintersectsurfacematerial',
            order_with_respect_to='intersect_surface',
        ),
        migrations.AlterOrderWithRespectTo(
            name='rodintegralworth',
            order_with_respect_to='sequence_case',
        ),
        migrations.AlterOrderWithRespectTo(
            name='roddifferentialworth',
            order_with_respect_to='sequence_case',
        ),
        migrations.AlterOrderWithRespectTo(
            name='rodcut',
            order_with_respect_to='rod',
        ),
        migrations.AlterOrderWithRespectTo(
            name='pelletloadingpattern',
            order_with_respect_to='fuel_element_type',
        ),
        migrations.AlterOrderWithRespectTo(
            name='gridloadingpattern',
            order_with_respect_to='fuel_assembly_model',
        ),
        migrations.AlterOrderWithRespectTo(
            name='egretsequencecase',
            order_with_respect_to='sequence_task',
        ),
        migrations.AlterOrderWithRespectTo(
            name='egretfollowcase',
            order_with_respect_to='follow_task',
        ),
        migrations.AlterOrderWithRespectTo(
            name='cycle',
            order_with_respect_to='unit',
        ),
        migrations.AlterUniqueTogether(
            name='controlrodclusterstep',
            unique_together=set([('map', 'control_rod_cluster')]),
        ),
    ]
